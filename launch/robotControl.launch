<launch>
    <include file="$(find robotino_node)/launch/robotino_node.launch">
        <arg name="hostname" value="129.69.102.242"/>
     </include>
    <param name="robot_description" textfile="$(find robotino_description)/robotino.urdf" />
    
    <arg name="package_name" value="prototype" />
    <!-- Navigation -->
    <arg name="map_file" default="$(find test_1)/scripts/acml_rviz/FinalGridMapv2.yaml"/>
    <node pkg="map_server" type="map_server" args="$(arg map_file)" respawn="true" name="map1" />
    <node pkg="$(arg package_name)" name="path_planner"  type="path_planner_node.py" output="screen" required="true"/>
    <node pkg="$(arg package_name)" name="strategy_planner" type="strategy_planner_node.py" output="screen" required="true" />
    <node pkg="$(arg package_name)" name="control"  type="control_node.py" output="screen" required="true"/>
    <node pkg="$(arg package_name)" name="fleetias_client" type="fleetias_client_node.py" output="screen" />

    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <!--param name="base_global_planner" value="navfn/NavfnROS" / -->
        <!-- param name="base_local_planner" value="base_local_planner/TrajectoryPlannerROS"/ -->
        <remap from="cmd_vel" to="/cmd_vel_real" /> 
        <rosparam file="$(find digital_twin)/param/costmap_common_params.yaml" command="load" ns="global_costmap" />
        <rosparam file="$(find digital_twin)/param/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find digital_twin)/param/local_costmap_params.yaml" command="load" />
        <rosparam file="$(find digital_twin)/param/global_costmap_params.yaml" command="load" />
        <rosparam file="$(find digital_twin)/param/base_local_planner_params.yaml" command="load" />
        <rosparam file="$(find digital_twin)/param/dwa_local_planner_params.yaml" command="load" />
        <rosparam file="$(find digital_twin)/param/move_base_params.yaml" command="load" />
    </node>

    <!-- Situational awarness -->
    <node pkg="$(arg package_name)" name="slam" type="slam_node.py" output="screen" required ="true"/>
    <node pkg="$(arg package_name)" name="object_detection" type="object_detection_node.py" output="screen" required="true" />
    <node pkg="$(arg package_name)" name="workstation_mapper"  type="workstation_mapper_node.py" output="screen" />

    <node pkg="amcl" type="amcl" name="amcl" output="screen">
        <remap from="scan" to="/scan"/>
        <param name="odom_frame_id" value="odom"/>
        <param name="odom_model_type" value="omni-corrected"/>
        <param name="base_frame_id" value="base_link"/>
        <param name="update_min_d" value="0.01"/>    <!--1cm  change-->
        <param name="update_min_a" value="0.05"/>  <!--2.865 degree change-->
    </node>

    <node pkg="rviz" type="rviz" name="rviz" args="-d $(find test_1)/scripts/acml_rviz/rvizConfigNew.rviz" respawn="true"/>

</launch>